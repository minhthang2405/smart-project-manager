import React, { useState } from 'react';
import { useLocation, useNavigate, useSearchParams } from 'react-router-dom';
import { API_BASE_URL } from '../config/api.js';
import UnifiedSkillForm from '../components/UnifiedSkillForm';

function SkillSetupPage() {
  const location = useLocation();
  const navigate = useNavigate();
  const [searchParams] = useSearchParams();
  const [saving, setSaving] = useState(false);
  const [error, setError] = useState('');

  // L·∫•y th√¥ng tin t·ª´ URL params ho·∫∑c location state
  const email = searchParams.get('email') || location.state?.email;
  const projectName = searchParams.get('projectName') || location.state?.projectName;
  const invitationToken = searchParams.get('token') || location.state?.token;

  if (!email) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-100">
        <div className="bg-white p-8 rounded-xl shadow-lg text-center">
          <h2 className="text-2xl font-bold text-red-600 mb-4">L·ªói</h2>
          <p className="text-gray-600 mb-4">Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng</p>
          <button
            onClick={() => navigate('/')}
            className="bg-indigo-600 text-white px-6 py-3 rounded-lg hover:bg-indigo-700 transition-colors"
          >
            V·ªÅ trang ch·ªß
          </button>
        </div>
      </div>
    );
  }

  const handleSkillSubmit = async (skills) => {
    setSaving(true);
    setError('');

    try {
      console.log('üìù Updating skills for:', email, skills);
      
      // Validate skills locally before sending
      const invalidSkills = Object.entries(skills).filter(([key, value]) => 
        isNaN(value) || value < 0 || value > 10
      );
      
      if (invalidSkills.length > 0) {
        throw new Error('C√≥ ƒëi·ªÉm k·ªπ nƒÉng kh√¥ng h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra l·∫°i.');
      }
      
      // 1. C·∫≠p nh·∫≠t k·ªπ nƒÉng c·ªßa user
      const updateSkillRes = await fetch(`${API_BASE_URL}/users/${encodeURIComponent(email)}`, {
        method: 'PATCH',
        headers: { 
          'Content-Type': 'application/json',
          'Accept': 'application/json'
        },
        body: JSON.stringify(skills),
      });

      if (!updateSkillRes.ok) {
        let errorMessage = 'L·ªói khi l∆∞u ƒëi·ªÉm skill!';
        try {
          const errorData = await updateSkillRes.json();
          errorMessage = errorData.error || errorMessage;
          console.error('‚ùå Error updating skills:', errorData);
        } catch (parseError) {
          console.error('‚ùå Error parsing error response:', parseError);
          errorMessage = `Server error: ${updateSkillRes.status} ${updateSkillRes.statusText}`;
        }
        throw new Error(errorMessage);
      }

      const updatedResponse = await updateSkillRes.json();
      console.log('‚úÖ Skills updated successfully:', updatedResponse);
      
      // Extract user data (response c√≥ th·ªÉ c√≥ format kh√°c)
      const updatedUser = updatedResponse.user || updatedResponse;

      // 2. N·∫øu c√≥ invitation token, ho√†n t·∫•t vi·ªác th√™m v√†o project
      if (invitationToken) {
        console.log('üîó Completing project join with token:', invitationToken);
        
        try {
          const completeJoinRes = await fetch(`${API_BASE_URL}/invitations/complete-join`, {
            method: 'POST',
            headers: { 
              'Content-Type': 'application/json',
              'Accept': 'application/json'
            },
            body: JSON.stringify({ 
              token: invitationToken,
              email: email 
            }),
          });

          if (!completeJoinRes.ok) {
            let errorMessage = 'L·ªói khi ho√†n t·∫•t tham gia d·ª± √°n';
            try {
              const errorData = await completeJoinRes.json();
              errorMessage = errorData.error || errorMessage;
              console.error('‚ùå Error completing join:', errorData);
            } catch (parseError) {
              console.error('‚ùå Error parsing join error response:', parseError);
              errorMessage = `Join error: ${completeJoinRes.status} ${completeJoinRes.statusText}`;
            }
            
            // QUAN TR·ªåNG: V·∫´n hi·ªÉn th·ªã th√†nh c√¥ng v√¨ skills ƒë√£ ƒë∆∞·ª£c l∆∞u
            console.warn('‚ö†Ô∏è Join failed but skills saved:', errorMessage);
            navigate('/', { 
              state: { 
                message: `K·ªπ nƒÉng ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng!\n\nTuy nhi√™n c√≥ l·ªói khi ho√†n t·∫•t tham gia d·ª± √°n "${projectName}". Vui l√≤ng li√™n h·ªá qu·∫£n tr·ªã vi√™n.`,
                messageType: 'success' // V·∫´n l√† success v√¨ skills ƒë√£ l∆∞u
              } 
            });
            return;
          }

          const joinResult = await completeJoinRes.json();
          console.log('‚úÖ Project join completed:', joinResult);

          // X√≥a pendingInvitation kh·ªèi sessionStorage
          sessionStorage.removeItem('pendingInvitation');

          // Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng ƒë·∫ßy ƒë·ªß
          navigate('/', { 
            state: { 
              message: `üéâ Ch√∫c m·ª´ng! B·∫°n ƒë√£ tham gia th√†nh c√¥ng d·ª± √°n "${projectName}"!\n\nK·ªπ nƒÉng c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t v√† b·∫°n c√≥ th·ªÉ b·∫Øt ƒë·∫ßu nh·∫≠n c√¥ng vi·ªác ph√π h·ª£p.`,
              messageType: 'success'
            } 
          });
          
        } catch (joinError) {
          console.error('‚ùå Join request failed:', joinError);
          // V·∫´n hi·ªÉn th·ªã th√†nh c√¥ng v√¨ skills ƒë√£ ƒë∆∞·ª£c l∆∞u
          navigate('/', { 
            state: { 
              message: `K·ªπ nƒÉng ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng!\n\nTuy nhi√™n c√≥ l·ªói k·∫øt n·ªëi khi ho√†n t·∫•t tham gia d·ª± √°n "${projectName}". Vui l√≤ng th·ª≠ l·∫°i sau.`,
              messageType: 'success'
            } 
          });
        }
      } else {
        // Chuy·ªÉn v·ªÅ trang ch·ªß sau khi l∆∞u th√†nh c√¥ng
        navigate('/', { 
          state: { 
            message: 'C·∫≠p nh·∫≠t k·ªπ nƒÉng th√†nh c√¥ng!',
            messageType: 'success'
          } 
        });
      }
    } catch (err) {
      setError(err.message);
    } finally {
      setSaving(false);
    }
  };

  return (
    <UnifiedSkillForm
      title={projectName ? `üéØ C·∫≠p nh·∫≠t k·ªπ nƒÉng cho d·ª± √°n "${projectName}"` : "üéØ C·∫≠p nh·∫≠t k·ªπ nƒÉng"}
      description={projectName 
        ? `Ch√†o m·ª´ng ${email} tham gia d·ª± √°n "${projectName}"! Vui l√≤ng ƒë√°nh gi√° k·ªπ nƒÉng ƒë·ªÉ nh·∫≠n ƒë∆∞·ª£c c√¥ng vi·ªác ph√π h·ª£p nh·∫•t.`
        : "ƒê√°nh gi√° k·ªπ nƒÉng c·ªßa b·∫°n t·ª´ 0-10 ƒë·ªÉ h·ªá th·ªëng giao vi·ªác ph√π h·ª£p."
      }
      onSubmit={handleSkillSubmit}
      loading={saving}
      submitText={projectName ? "Ho√†n t·∫•t tham gia d·ª± √°n" : "L∆∞u k·ªπ nƒÉng"}
      showCancel={true}
      onCancel={() => navigate('/')}
    />
  );
}

export default SkillSetupPage;

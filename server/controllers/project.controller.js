import Project from '../models/Project.js';
import ProjectMember from '../models/ProjectMember.js';
import User from '../models/User.js';
import ProjectInvitation from '../models/ProjectInvitation.js';
import * as mailService from '../services/mail.service.js';
import { Op } from 'sequelize';
import crypto from 'crypto';

export const createProject = async (req, res) => {
    const { name, owner } = req.body;
    const project = await Project.create({ name, owner });
    await ProjectMember.create({ projectId: project.id, email: owner });
    res.json(project);
};

export const addMember = async (req, res) => {
    try {
        const { email } = req.body;
        const { id } = req.params;

        // Ki·ªÉm tra email c√≥ h·ª£p l·ªá kh√¥ng
        if (!email || !email.includes('@')) {
            return res.status(400).json({ error: 'Email kh√¥ng h·ª£p l·ªá' });
        }

        // Ki·ªÉm tra d·ª± √°n c√≥ t·ªìn t·∫°i kh√¥ng
        const project = await Project.findByPk(id);
        if (!project) {
            return res.status(404).json({ error: 'D·ª± √°n kh√¥ng t·ªìn t·∫°i' });
        }

        // Ki·ªÉm tra th√†nh vi√™n ƒë√£ t·ªìn t·∫°i trong d·ª± √°n ch∆∞a
        const existInProject = await ProjectMember.findOne({ where: { projectId: id, email } });
        if (existInProject) {
            return res.status(400).json({ error: 'Th√†nh vi√™n ƒë√£ t·ªìn t·∫°i trong d·ª± √°n' });
        }

        // Ki·ªÉm tra ƒë√£ c√≥ l·ªùi m·ªùi ch∆∞a
        const existingInvite = await ProjectInvitation.findOne({ 
            where: { 
                projectId: id, 
                email, 
                status: 'pending',
                expiresAt: { [Op.gt]: new Date() }
            } 
        });
        if (existingInvite) {
            return res.status(400).json({ error: 'ƒê√£ g·ª≠i l·ªùi m·ªùi cho ng∆∞·ªùi n√†y r·ªìi, vui l√≤ng ƒë·ª£i ph·∫£n h·ªìi' });
        }

        // T·∫°o token m·ªùi v√† th·ªùi gian h·∫øt h·∫°n (7 ng√†y)
        const inviteToken = crypto.randomBytes(32).toString('hex');
        const expiresAt = new Date();
        expiresAt.setDate(expiresAt.getDate() + 7);

        // T·∫°o l·ªùi m·ªùi
        await ProjectInvitation.create({
            projectId: id,
            email,
            inviterEmail: project.owner,
            inviteToken,
            expiresAt
        });

        // G·ª≠i email m·ªùi v·ªõi production URL
        const clientUrl = process.env.CLIENT_URL || process.env.FRONTEND_URL || 'http://localhost:5173';
        const emailTemplate = mailService.generateInviteEmailTemplate(
            project.name, 
            project.owner, 
            inviteToken,
            clientUrl
        );
        
        await mailService.sendMail({
            to: email,
            subject: `üöÄ L·ªùi m·ªùi tham gia d·ª± √°n "${project.name}"`,
            text: `B·∫°n ƒë∆∞·ª£c m·ªùi tham gia d·ª± √°n "${project.name}" b·ªüi ${project.owner}. Vui l√≤ng ki·ªÉm tra email ƒë·ªÉ xem chi ti·∫øt.`,
            html: emailTemplate
        });

        res.json({ 
            message: 'G·ª≠i l·ªùi m·ªùi th√†nh c√¥ng! Ng∆∞·ªùi ƒë∆∞·ª£c m·ªùi s·∫Ω nh·∫≠n ƒë∆∞·ª£c email ƒë·ªÉ ph·∫£n h·ªìi.',
            inviteToken 
        });
        
    } catch (error) {
        console.error('L·ªói khi g·ª≠i l·ªùi m·ªùi:', error);
        res.status(500).json({ error: 'L·ªói h·ªá th·ªëng khi g·ª≠i l·ªùi m·ªùi' });
    }
};

export const getProjects = async (req, res) => {
    const { owner } = req.query;
    let where = {};
    if (owner) where.owner = owner;
    const projects = await Project.findAll({ where });
    const projectsWithMembers = await Promise.all(projects.map(async (p) => {
        const members = await ProjectMember.findAll({ where: { projectId: p.id } });
        return { ...p.toJSON(), members: members.map(m => m.email) };
    }));
    res.json(projectsWithMembers);
};

export const getProjectById = async (req, res) => {
    const { id } = req.params;
    const project = await Project.findByPk(id);
    if (!project) return res.status(404).json({ error: 'Project not found' });
    const members = await ProjectMember.findAll({ where: { projectId: id } });
    res.json({ ...project.toJSON(), members: members.map(m => m.email) });
};

// L·∫•y danh s√°ch d·ª± √°n m√† user ƒë√£ tham gia (kh√¥ng ph·∫£i ch·ªß d·ª± √°n)
export const getJoinedProjects = async (req, res) => {
    try {
        const { email } = req.params;
        
        if (!email) {
            return res.status(400).json({ error: 'Email is required' });
        }

        console.log('üîç Getting joined projects for:', email);

        // L·∫•y t·∫•t c·∫£ d·ª± √°n m√† user l√† th√†nh vi√™n
        const memberProjects = await ProjectMember.findAll({
            where: { email },
            include: [{
                model: Project,
                as: 'project', // C·∫ßn thi·∫øt l·∫≠p association
                attributes: ['id', 'name', 'owner', 'createdAt', 'updatedAt']
            }]
        });

        console.log('‚úÖ Found member projects:', memberProjects.length);

        // Format response
        const projects = memberProjects.map(mp => ({
            id: mp.project.id,
            name: mp.project.name,
            owner: mp.project.owner,
            joinedAt: mp.createdAt,
            isOwner: mp.project.owner === email,
            role: mp.project.owner === email ? 'owner' : 'member'
        }));

        res.json(projects);
        
    } catch (error) {
        console.error('‚ùå Error getting joined projects:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
};

// L·∫•y th·ªëng k√™ d·ª± √°n cho user
export const getUserProjectStats = async (req, res) => {
    try {
        const { email } = req.params;
        
        if (!email) {
            return res.status(400).json({ error: 'Email is required' });
        }

        // D·ª± √°n s·ªü h·ªØu
        const ownedProjects = await Project.count({ where: { owner: email } });
        
        // D·ª± √°n tham gia
        const joinedProjects = await ProjectMember.count({ where: { email } });
        
        // D·ª± √°n tham gia nh∆∞ng kh√¥ng s·ªü h·ªØu
        const memberProjects = await ProjectMember.count({ 
            where: { email },
            include: [{
                model: Project,
                as: 'project',
                where: { owner: { [Op.ne]: email } }
            }]
        });

        res.json({
            owned: ownedProjects,
            joined: joinedProjects,
            asMember: memberProjects,
            total: joinedProjects
        });
        
    } catch (error) {
        console.error('‚ùå Error getting project stats:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
};

import ProjectInvitation from '../models/ProjectInvitation.js';
import ProjectMember from '../models/ProjectMember.js';
import User from '../models/User.js';
import Project from '../models/Project.js';
import * as mailService from '../services/mail.service.js';
import { Op } from 'sequelize';

// X·ª≠ l√Ω ph·∫£n h·ªìi l·ªùi m·ªùi (tham gia ho·∫∑c t·ª´ ch·ªëi)
export const handleInvitationResponse = async (req, res) => {
    try {
        const { token, action } = req.query;

        console.log('üîç Invitation Response:', { token, action });

        if (!token || !action) {
            return res.status(400).json({ error: 'Thi·∫øu th√¥ng tin l·ªùi m·ªùi' });
        }

        if (!['accept', 'reject'].includes(action)) {
            return res.status(400).json({ error: 'H√†nh ƒë·ªông kh√¥ng h·ª£p l·ªá' });
        }

        // T√¨m l·ªùi m·ªùi - b·ªè include project ƒë·ªÉ tr√°nh l·ªói association
        const invitation = await ProjectInvitation.findOne({
            where: {
                inviteToken: token,
                status: 'pending',
                expiresAt: { [Op.gt]: new Date() }
            }
        });

        console.log('üîç Found invitation:', invitation?.id, invitation?.status);

        if (!invitation) {
            // Ki·ªÉm tra xem c√≥ invitation n√†o v·ªõi token n√†y kh√¥ng (k·ªÉ c·∫£ ƒë√£ expired)
            const anyInvitation = await ProjectInvitation.findOne({
                where: { inviteToken: token }
            });
            
            if (anyInvitation) {
                console.log('‚ùå Invitation expired or not pending:', anyInvitation.status, anyInvitation.expiresAt);
                return res.status(404).json({ 
                    error: anyInvitation.expiresAt < new Date() ? 'L·ªùi m·ªùi ƒë√£ h·∫øt h·∫°n' : 'L·ªùi m·ªùi ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω r·ªìi',
                    expired: true 
                });
            } else {
                console.log('‚ùå No invitation found with token:', token);
                return res.status(404).json({ 
                    error: 'L·ªùi m·ªùi kh√¥ng t·ªìn t·∫°i',
                    expired: true 
                });
            }
        }

        const project = await Project.findByPk(invitation.projectId);
        
        if (action === 'accept') {
            // Ch·∫•p nh·∫≠n l·ªùi m·ªùi - ch·ªâ c·∫≠p nh·∫≠t tr·∫°ng th√°i, kh√¥ng t·∫°o user hay th√™m v√†o project ngay
            invitation.status = 'accepted';
            await invitation.save();

            const project = await Project.findByPk(invitation.projectId);

            // G·ª≠i th√¥ng b√°o cho ch·ªß d·ª± √°n
            try {
                await mailService.sendMail({
                    to: invitation.inviterEmail,
                    subject: `‚úÖ ${invitation.email} ƒë√£ ch·∫•p nh·∫≠n l·ªùi m·ªùi d·ª± √°n "${project.name}"`,
                    text: `Tin vui! ${invitation.email} ƒë√£ ch·∫•p nh·∫≠n l·ªùi m·ªùi tham gia d·ª± √°n "${project.name}". H·ªç s·∫Ω ho√†n t·∫•t vi·ªác ƒëƒÉng k√Ω v√† c·∫≠p nh·∫≠t k·ªπ nƒÉng ƒë·ªÉ tham gia d·ª± √°n.`,
                    html: `
                        <div style="font-family: Arial, sans-serif; padding: 20px; background: #f4f4f4;">
                            <div style="max-width: 600px; margin: 0 auto; background: white; padding: 30px; border-radius: 10px;">
                                <h2 style="color: #28a745;">‚úÖ L·ªùi m·ªùi ƒë∆∞·ª£c ch·∫•p nh·∫≠n!</h2>
                                <p>Tin vui! <strong>${invitation.email}</strong> ƒë√£ ch·∫•p nh·∫≠n l·ªùi m·ªùi tham gia d·ª± √°n:</p>
                                <div style="background: #e8f5e8; padding: 15px; border-radius: 5px; margin: 20px 0;">
                                    <h3>üìã ${project.name}</h3>
                                </div>
                                <p>Th√†nh vi√™n m·ªõi s·∫Ω ho√†n t·∫•t vi·ªác ƒëƒÉng k√Ω v√† c·∫≠p nh·∫≠t k·ªπ nƒÉng ƒë·ªÉ c√≥ th·ªÉ nh·∫≠n c√¥ng vi·ªác.</p>
                                <p style="color: #666; font-size: 14px;">¬© 2025 Smart Project Management</p>
                            </div>
                        </div>
                    `
                });
            } catch (emailError) {
                console.error('L·ªói g·ª≠i email th√¥ng b√°o:', emailError);
            }

            // Tr·∫£ v·ªÅ th√¥ng tin ƒë·ªÉ redirect ƒë·∫øn trang ƒëƒÉng nh·∫≠p
            res.json({
                success: true,
                action: 'accept',
                message: 'Ch·∫•p nh·∫≠n l·ªùi m·ªùi th√†nh c√¥ng!',
                projectName: project.name,
                email: invitation.email,
                inviteToken: token,
                needsLogin: true,
                redirectTo: 'login'
            });

        } else if (action === 'reject') {
            // T·ª´ ch·ªëi l·ªùi m·ªùi
            invitation.status = 'rejected';
            await invitation.save();

            // G·ª≠i th√¥ng b√°o cho ch·ªß d·ª± √°n
            try {
                await mailService.sendMail({
                    to: invitation.inviterEmail,
                    subject: `‚ùå ${invitation.email} ƒë√£ t·ª´ ch·ªëi tham gia d·ª± √°n "${project.name}"`,
                    text: `${invitation.email} ƒë√£ t·ª´ ch·ªëi l·ªùi m·ªùi tham gia d·ª± √°n "${project.name}".`,
                    html: `
                        <div style="font-family: Arial, sans-serif; padding: 20px; background: #f4f4f4;">
                            <div style="max-width: 600px; margin: 0 auto; background: white; padding: 30px; border-radius: 10px;">
                                <h2 style="color: #dc3545;">‚ùå L·ªùi m·ªùi b·ªã t·ª´ ch·ªëi</h2>
                                <p><strong>${invitation.email}</strong> ƒë√£ t·ª´ ch·ªëi l·ªùi m·ªùi tham gia d·ª± √°n:</p>
                                <div style="background: #ffeaa7; padding: 15px; border-radius: 5px; margin: 20px 0;">
                                    <h3>üìã ${project.name}</h3>
                                </div>
                                <p>B·∫°n c√≥ th·ªÉ m·ªùi ng∆∞·ªùi kh√°c ho·∫∑c th·ª≠ l·∫°i sau.</p>
                                <p style="color: #666; font-size: 14px;">¬© 2025 Smart Project Management</p>
                            </div>
                        </div>
                    `
                });
            } catch (emailError) {
                console.error('L·ªói g·ª≠i email th√¥ng b√°o:', emailError);
            }

            res.json({
                success: true,
                message: 'T·ª´ ch·ªëi l·ªùi m·ªùi th√†nh c√¥ng!',
                projectName: project.name
            });
        }

    } catch (error) {
        console.error('L·ªói x·ª≠ l√Ω ph·∫£n h·ªìi l·ªùi m·ªùi:', error);
        res.status(500).json({ error: 'L·ªói h·ªá th·ªëng' });
    }
};

// L·∫•y th√¥ng tin l·ªùi m·ªùi ƒë·ªÉ hi·ªÉn th·ªã trang x√°c nh·∫≠n
export const getInvitationInfo = async (req, res) => {
    try {
        const { token } = req.params;

        const invitation = await ProjectInvitation.findOne({
            where: {
                inviteToken: token,
                status: 'pending',
                expiresAt: { [Op.gt]: new Date() }
            }
        });

        if (!invitation) {
            return res.status(404).json({ 
                error: 'L·ªùi m·ªùi kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ h·∫øt h·∫°n' 
            });
        }

        const project = await Project.findByPk(invitation.projectId);

        res.json({
            email: invitation.email,
            projectName: project.name,
            inviterEmail: invitation.inviterEmail,
            expiresAt: invitation.expiresAt
        });

    } catch (error) {
        console.error('L·ªói l·∫•y th√¥ng tin l·ªùi m·ªùi:', error);
        res.status(500).json({ error: 'L·ªói h·ªá th·ªëng' });
    }
};

// L·∫•y danh s√°ch l·ªùi m·ªùi c·ªßa d·ª± √°n (cho ch·ªß d·ª± √°n)
export const getProjectInvitations = async (req, res) => {
    try {
        const { projectId } = req.params;
        
        const invitations = await ProjectInvitation.findAll({
            where: { projectId },
            order: [['createdAt', 'DESC']]
        });

        res.json(invitations);
    } catch (error) {
        console.error('L·ªói l·∫•y danh s√°ch l·ªùi m·ªùi:', error);
        res.status(500).json({ error: 'L·ªói h·ªá th·ªëng' });
    }
};

// Ho√†n t·∫•t tham gia d·ª± √°n sau khi ng∆∞·ªùi d√πng ƒë√£ ƒëƒÉng nh·∫≠p
export const completeProjectJoin = async (req, res) => {
    try {
        const { token, email } = req.body;

        console.log('üîó Complete project join request:', { 
            token: token?.slice(0, 8) + '...', 
            email,
            timestamp: new Date().toISOString()
        });

        if (!token || !email) {
            console.log('‚ùå Missing required fields:', { token: !!token, email: !!email });
            return res.status(400).json({ error: 'Thi·∫øu th√¥ng tin c·∫ßn thi·∫øt' });
        }

        // T√¨m invitation
        console.log('üîç Looking for invitation...');
        const invitation = await ProjectInvitation.findOne({
            where: {
                inviteToken: token,
                email: email
            }
        });

        console.log('üîç Found invitation:', invitation ? {
            id: invitation.id,
            status: invitation.status,
            email: invitation.email,
            projectId: invitation.projectId,
            expiresAt: invitation.expiresAt
        } : 'None');

        if (!invitation) {
            console.log('‚ùå No invitation found');
            return res.status(404).json({ error: 'Kh√¥ng t√¨m th·∫•y l·ªùi m·ªùi h·ª£p l·ªá' });
        }

        // Ki·ªÉm tra expiry
        if (invitation.expiresAt && new Date() > invitation.expiresAt) {
            console.log('‚ùå Invitation expired:', invitation.expiresAt);
            return res.status(400).json({ error: 'L·ªùi m·ªùi ƒë√£ h·∫øt h·∫°n' });
        }

        // Ch·∫•p nh·∫≠n invitation n·∫øu ch∆∞a ƒë∆∞·ª£c ch·∫•p nh·∫≠n
        if (invitation.status === 'pending') {
            console.log('‚ö†Ô∏è Invitation still pending, accepting it now...');
            invitation.status = 'accepted';
            await invitation.save();
        } else if (invitation.status !== 'accepted' && invitation.status !== 'completed') {
            console.log('‚ùå Invalid invitation status:', invitation.status);
            return res.status(400).json({ 
                error: `L·ªùi m·ªùi kh√¥ng ·ªü tr·∫°ng th√°i h·ª£p l·ªá (${invitation.status})` 
            });
        }

        // Ki·ªÉm tra user
        console.log('üë§ Checking user exists...');
        const user = await User.findByPk(email);
        if (!user) {
            console.log('‚ùå User not found:', email);
            return res.status(404).json({ error: 'Ng∆∞·ªùi d√πng ch∆∞a ƒëƒÉng k√Ω' });
        }
        console.log('‚úÖ User found:', { email: user.email, name: user.name });

        // Ki·ªÉm tra project
        console.log('üìã Checking project exists...');
        const project = await Project.findByPk(invitation.projectId);
        if (!project) {
            console.log('‚ùå Project not found:', invitation.projectId);
            return res.status(404).json({ error: 'D·ª± √°n kh√¥ng t·ªìn t·∫°i' });
        }
        console.log('‚úÖ Project found:', { id: project.id, name: project.name });

        // Th√™m v√†o d·ª± √°n n·∫øu ch∆∞a c√≥
        console.log('üîç Checking existing membership...');
        const existingMember = await ProjectMember.findOne({
            where: { projectId: invitation.projectId, email: email }
        });

        if (!existingMember) {
            console.log('‚ûï Adding user to project...');
            const newMember = await ProjectMember.create({
                projectId: invitation.projectId,
                email: email
            });
            console.log('‚úÖ Member added:', { id: newMember.id, projectId: newMember.projectId, email: newMember.email });
        } else {
            console.log('‚ÑπÔ∏è User already member of project:', { id: existingMember.id });
        }

        // C·∫≠p nh·∫≠t tr·∫°ng th√°i invitation th√†nh completed
        console.log('üîÑ Updating invitation status to completed...');
        invitation.status = 'completed';
        await invitation.save();
        console.log('‚úÖ Invitation status updated');

        // G·ª≠i th√¥ng b√°o cu·ªëi cho ch·ªß d·ª± √°n
        console.log('üìß Sending completion notification...');
        try {
            await mailService.sendMail({
                to: invitation.inviterEmail,
                subject: `üéâ ${email} ƒë√£ ho√†n t·∫•t tham gia d·ª± √°n "${project.name}"`,
                text: `${email} ƒë√£ ho√†n t·∫•t vi·ªác ƒëƒÉng k√Ω v√† tham gia d·ª± √°n "${project.name}". B·∫°n c√≥ th·ªÉ b·∫Øt ƒë·∫ßu giao c√¥ng vi·ªác cho h·ªç.`,
                html: `
                    <div style="font-family: Arial, sans-serif; padding: 20px; background: #f4f4f4;">
                        <div style="max-width: 600px; margin: 0 auto; background: white; padding: 30px; border-radius: 10px;">
                            <h2 style="color: #28a745;">üéâ Th√†nh vi√™n m·ªõi ƒë√£ s·∫µn s√†ng!</h2>
                            <p><strong>${email}</strong> ƒë√£ ho√†n t·∫•t vi·ªác tham gia d·ª± √°n:</p>
                            <div style="background: #e8f5e8; padding: 15px; border-radius: 5px; margin: 20px 0;">
                                <h3>üìã ${project.name}</h3>
                            </div>
                            <p>B·∫°n c√≥ th·ªÉ b·∫Øt ƒë·∫ßu giao c√¥ng vi·ªác v√† s·ª≠ d·ª•ng t√≠nh nƒÉng ph√¢n c√¥ng th√¥ng minh.</p>
                            <p style="color: #666; font-size: 14px;">¬© 2025 Smart Project Management</p>
                        </div>
                    </div>
                `
            });
        } catch (emailError) {
            console.error('‚ùå Email notification failed:', emailError);
        }

        console.log('‚úÖ Project join completed successfully for:', email);

        res.json({
            success: true,
            message: 'Tham gia d·ª± √°n th√†nh c√¥ng!',
            projectName: project.name,
            email: email
        });

    } catch (error) {
        console.error('‚ùå L·ªói ho√†n t·∫•t tham gia d·ª± √°n:', error);
        res.status(500).json({ error: 'L·ªói h·ªá th·ªëng: ' + error.message });
    }
};
